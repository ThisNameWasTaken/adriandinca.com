{"version":3,"sources":["webpack:///./src/components/material/Tooltip/Tooltip.js"],"names":["Tooltip","_ref","children","htmlFor","_ref$top","top","_ref$left","left","_ref$right","right","_ref$bottom","bottom","otherProps","_objectWithoutPropertiesLoose","rootRef","useRef","displayTooltip","event","root","current","anchorRect","target","getBoundingClientRect","x","width","y","height","rootWidth","offsetWidth","rootHeight","offsetHeight","marginLeft","marginTop","isHorizontal","isVertical","isTop","window","innerHeight","isBottom","isLeft","innerWidth","isRight","style","classList","add","_cssClasses","IS_ACTIVE","hideTooltip","remove","useEffect","anchor","document","getElementById","hasAttribute","setAttribute","addEventListener","key","console","error","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","Object","assign","className","role","aria-labelledby","ref","BOTTOM","LEFT","RIGHT","TOP"],"mappings":"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","file":"10-909f0d6346ccb5f42279.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport './Tooltip.scss';\r\n\r\n/**\r\n * @param {{\r\n * children: React.ReactNode,\r\n * htmlFor: string,\r\n * top?: boolean,\r\n * left?: boolean,\r\n * bottom?: boolean,\r\n * right?: boolean,\r\n * }} param\r\n */\r\nconst Tooltip = ({\r\n  children,\r\n  htmlFor,\r\n  top = false,\r\n  left = false,\r\n  right = false,\r\n  bottom = true,\r\n  ...otherProps\r\n}) => {\r\n  const rootRef = useRef();\r\n\r\n  const displayTooltip = event => {\r\n    const root = rootRef.current;\r\n\r\n    if (!root) return;\r\n\r\n    const anchorRect = event.target.getBoundingClientRect();\r\n\r\n    let x = anchorRect.x + anchorRect.width / 2;\r\n    const y = anchorRect.y + anchorRect.height / 2;\r\n\r\n    const rootWidth = root.offsetWidth;\r\n    const rootHeight = root.offsetHeight;\r\n\r\n    const marginLeft = -1 * (rootWidth / 2);\r\n    const marginTop = -1 * (rootHeight / 2);\r\n\r\n    const isHorizontal = left || right;\r\n    const isVertical = !isHorizontal;\r\n\r\n    const isTop =\r\n      isVertical &&\r\n      (top || anchorRect.bottom + rootHeight + 10 > window.innerHeight);\r\n\r\n    const isBottom =\r\n      isVertical && (bottom || anchorRect.top - rootHeight - 10 < 0);\r\n\r\n    const isLeft =\r\n      isHorizontal &&\r\n      (left || anchorRect.right + rootWidth + 10 > window.innerWidth);\r\n\r\n    const isRight =\r\n      isHorizontal && (right || anchorRect.left - rootWidth - 10 < 0);\r\n\r\n    if (isLeft || isRight) {\r\n      x = anchorRect.width / 2;\r\n      if (y + marginTop < 0) {\r\n        root.style.top = '0';\r\n        root.style.marginTop = '0';\r\n      } else {\r\n        root.style.top = `${y}px`;\r\n        root.style.marginTop = `${marginTop}px`;\r\n      }\r\n    } else if (isTop || isBottom) {\r\n      if (x + marginLeft < 0) {\r\n        root.style.left = '0';\r\n        root.style.marginLeft = '0';\r\n      } else {\r\n        root.style.left = `${x}px`;\r\n        root.style.marginLeft = `${marginLeft}px`;\r\n      }\r\n    }\r\n\r\n    if (isVertical) {\r\n      if (isTop && !top) {\r\n        // It has to be at the top, otherwise it would not be in the viewport\r\n        root.style.top = `${anchorRect.top - rootHeight - 10}px`;\r\n      } else if (isBottom && !bottom) {\r\n        // It has to be at the bottom, otherwise it would not be in the viewport\r\n        root.style.top = `${anchorRect.top + anchorRect.height + 10}px`;\r\n      } else if (top) {\r\n        root.style.top = `${anchorRect.top - rootHeight - 10}px`;\r\n      } else if (bottom) {\r\n        root.style.top = `${anchorRect.top + anchorRect.height + 10}px`;\r\n      }\r\n    } else {\r\n      if (isLeft && !left) {\r\n        // It has to be to the left, otherwise it would not be in the viewport\r\n        root.style.left = `${anchorRect.left - rootWidth - 10}px`;\r\n      } else if (isRight && !right) {\r\n        // It has to be to the right, otherwise it would not be in the viewport\r\n        root.style.left = `${anchorRect.left + anchorRect.width + 10}px`;\r\n      } else if (left) {\r\n        root.style.left = `${anchorRect.left - rootWidth - 10}px`;\r\n      } else {\r\n        root.style.left = `${anchorRect.left + anchorRect.width + 10}px`;\r\n      }\r\n    }\r\n\r\n    root.classList.add(Tooltip._cssClasses.IS_ACTIVE);\r\n  };\r\n\r\n  const hideTooltip = () => {\r\n    const root = rootRef.current;\r\n    if (!root) return;\r\n    root.classList.remove(Tooltip._cssClasses.IS_ACTIVE);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const anchor = document.getElementById(htmlFor);\r\n\r\n    if (!anchor) {\r\n      console.error(`could not find an element with the id '${htmlFor}'`);\r\n      return;\r\n    }\r\n\r\n    // Prevent accidental text selection on Android\r\n    if (!anchor.hasAttribute('tabindex')) {\r\n      anchor.setAttribute('tabindex', '0');\r\n    }\r\n\r\n    anchor.addEventListener('mouseenter', displayTooltip, false);\r\n\r\n    anchor.addEventListener('touchend', displayTooltip, false);\r\n\r\n    anchor.addEventListener(\r\n      'keyup',\r\n      event => event.key === 'Tab' && displayTooltip(event),\r\n      false\r\n    );\r\n\r\n    anchor.addEventListener('blur', hideTooltip, false);\r\n\r\n    anchor.addEventListener('mouseleave', hideTooltip, false);\r\n\r\n    window.addEventListener('scroll', hideTooltip, true);\r\n\r\n    window.addEventListener('touchstart', hideTooltip);\r\n  }, []);\r\n\r\n  return (\r\n    <span\r\n      className=\"mdc-tooltip\"\r\n      role=\"tooltip\"\r\n      htmlFor={htmlFor}\r\n      aria-labelledby={htmlFor}\r\n      ref={rootRef}\r\n      {...otherProps}\r\n    >\r\n      {children}\r\n    </span>\r\n  );\r\n};\r\n\r\n/**\r\n * @enum {string}\r\n * @private\r\n */\r\nTooltip._cssClasses = {\r\n  IS_ACTIVE: 'mdc-tooltip--active',\r\n  BOTTOM: 'mdc-tooltip--bottom',\r\n  LEFT: 'mdc-tooltip--left',\r\n  RIGHT: 'mdc-tooltip--right',\r\n  TOP: 'mdc-tooltip--top',\r\n};\r\n\r\nexport default Tooltip;\r\n"],"sourceRoot":""}